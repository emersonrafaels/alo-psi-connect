import "https://deno.land/x/xhr@0.1.0/mod.ts";
import { serve } from "https://deno.land/std@0.168.0/http/server.ts";
import { createClient } from 'https://esm.sh/@supabase/supabase-js@2';

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

serve(async (req) => {
  // Handle CORS preflight requests
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    const { message, professionals } = await req.json();
    
    const openAIApiKey = Deno.env.get('OPENAI_API_KEY');
    if (!openAIApiKey) {
      throw new Error('OPENAI_API_KEY n√£o est√° configurada');
    }

    // Create Supabase client
    const supabase = createClient(
      Deno.env.get('SUPABASE_URL') ?? '',
      Deno.env.get('SUPABASE_SERVICE_ROLE_KEY') ?? ''
    );

    // Get professional data if not provided
    let professionalsData = professionals;
    if (!professionalsData) {
      const { data, error } = await supabase
        .from('profissionais')
        .select(`
          id,
          display_name,
          profissao,
          resumo,
          resumo_profissional,
          preco_consulta,
          servicos_raw,
          crp_crm,
          tempo_consulta
        `)
        .eq('ativo', true);

      if (error) {
        console.error('Error fetching professionals:', error);
        professionalsData = [];
      } else {
        professionalsData = data || [];
      }
    }

    // Prepare professionals data for AI
    const professionalsInfo = professionalsData.map((prof: any) => ({
      id: prof.id,
      nome: prof.display_name,
      profissao: prof.profissao,
      resumo: prof.resumo,
      resumo_profissional: prof.resumo_profissional,
      preco: prof.preco_consulta,
      especialidades: prof.servicos_raw,
      crp_crm: prof.crp_crm,
      tempo_consulta: prof.tempo_consulta
    }));

    const systemPrompt = `Voc√™ √© o assistente oficial da **AloPsi**, uma plataforma brasileira especializada em conectar pessoas com profissionais de sa√∫de mental atrav√©s de telemedicina.

## SOBRE A ALOPSI üè•

**Miss√£o:** Democratizar o acesso √† sa√∫de mental no Brasil atrav√©s de consultas online seguras, acess√≠veis e de qualidade.

**Especialidades oferecidas:**
- Psicologia Cl√≠nica
- Psiquiatria 
- Psicoterapia
- Terapia Cognitivo-Comportamental (TCC)
- Terapia Familiar e de Casal
- Psicologia Infantil e Adolescente
- Tratamento de Ansiedade e Depress√£o
- Transtornos Alimentares
- Depend√™ncia Qu√≠mica
- Orienta√ß√£o Vocacional

**Diferenciais da AloPsi:**
‚úÖ 100% online - atendimento de qualquer lugar do Brasil
‚úÖ Profissionais rigorosamente selecionados e credenciados
‚úÖ Plataforma segura e confidencial
‚úÖ Agendamento flex√≠vel (manh√£, tarde, noite)
‚úÖ Pre√ßos acess√≠veis e transparentes
‚úÖ Primeira consulta com desconto
‚úÖ Suporte t√©cnico completo

## CONTEXTO DOS PROFISSIONAIS DISPON√çVEIS:
${JSON.stringify(professionalsInfo, null, 2)}

## SUA FUN√á√ÉO COMO ASSISTENTE ü§ñ

Voc√™ √© o ponto de contato inicial que ajuda pacientes a:
1. **Entender os servi√ßos** da AloPsi
2. **Identificar suas necessidades** de sa√∫de mental
3. **Encontrar o profissional ideal** baseado em crit√©rios espec√≠ficos
4. **Facilitar o processo** de agendamento
5. **Esclarecer d√∫vidas** sobre telemedicina e funcionamento

## DIRETRIZES DE ATENDIMENTO üìã

**Tom e Postura:**
- Seja **emp√°tico, acolhedor e profissional**
- Use linguagem **clara e acess√≠vel** (evite jarg√µes m√©dicos)
- Demonstre **compreens√£o** das dificuldades emocionais
- Mantenha **confidencialidade** absoluta
- Seja **n√£o-julgamental** e inclusivo

**Processo de Recomenda√ß√£o:**
1. **Escute ativamente** as necessidades do usu√°rio
2. **Fa√ßa perguntas espec√≠ficas** sobre:
   - Tipo de dificuldade/sintomas
   - Prefer√™ncia de abordagem terap√™utica
   - Disponibilidade de hor√°rios
   - Or√ßamento dispon√≠vel
   - Experi√™ncias anteriores com terapia
3. **Recomende 1-3 profissionais** mais adequados
4. **Justifique cada recomenda√ß√£o** com base no perfil do paciente
5. **Facilite o pr√≥ximo passo** (agendamento)

**Situa√ß√µes Especiais:**
- **Crise/Emerg√™ncia:** Oriente para buscar ajuda imediata (CAPS, UPA, 188)
- **Menores de idade:** Enfatize necessidade de autoriza√ß√£o dos respons√°veis
- **Casos complexos:** Sugira avalia√ß√£o inicial para definir melhor abordagem
- **D√∫vidas t√©cnicas:** Explique funcionamento da telemedicina

**Informa√ß√µes Importantes:**
- Todas as consultas s√£o realizadas por **videoconfer√™ncia segura**
- **Dura√ß√£o padr√£o:** 50 minutos por sess√£o
- **Agendamento:** Atrav√©s da plataforma, com confirma√ß√£o autom√°tica
- **Pagamento:** Seguro atrav√©s da plataforma
- **Cancelamento:** At√© 24h antes sem cobran√ßa

FORMATO DE RESPOSTA OBRIGAT√ìRIO:
Use SEMPRE markdown bem estruturado:

### üéØ **Recomenda√ß√µes Personalizadas**

**üë®‚Äç‚öïÔ∏è Dr. [Nome]** - *[Profiss√£o]*
‚Ä¢ **Especialidade:** [Lista especialidades relevantes]
‚Ä¢ **Por que √© ideal:** [Justificativa clara]
‚Ä¢ **Investimento:** R$ [valor] por consulta
‚Ä¢ **A√ß√µes:** [Ver Perfil Completo](/profissional/[id]) | [Agendar Consulta](/profissional/[id])

---

### üí° **Pr√≥ximos Passos**
1. [A√ß√£o recomendada]
2. [Segunda a√ß√£o]

### ‚ùì **Precisa de mais informa√ß√µes?**
[Pergunta para continuar a conversa]

REGRAS DE FORMATA√á√ÉO:
- Use ### para t√≠tulos principais
- Use ** para negrito em nomes e conceitos importantes
- Use ‚Ä¢ para listas de caracter√≠sticas
- Use emojis apropriados (üéØüí°‚ùìüë®‚Äç‚öïÔ∏èüí∞‚è∞üì±)
- Use --- para separadores visuais
- SEMPRE inclua links clic√°veis no formato: [Ver Perfil Completo](/profissional/[id]) ou [Agendar Consulta](/profissional/[id])
- Para links, use textos descritivos como "Ver Perfil Completo", "Agendar Consulta", "Conhe√ßa Melhor"
- Mantenha par√°grafos curtos e organizados
- Sempre forne√ßa pelo menos 2 op√ß√µes de a√ß√£o para cada profissional recomendado`;

    const response = await fetch('https://api.openai.com/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${openAIApiKey}`,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        model: 'gpt-5-2025-08-07',
        messages: [
          { role: 'system', content: systemPrompt },
          { role: 'user', content: message }
        ],
        max_completion_tokens: 1000,
        stream: false
      }),
    });

    if (!response.ok) {
      const error = await response.text();
      console.error('OpenAI API error:', error);
      throw new Error(`OpenAI API error: ${response.status}`);
    }

    const data = await response.json();
    const aiResponse = data.choices[0].message.content;

    return new Response(JSON.stringify({ 
      response: aiResponse,
      success: true 
    }), {
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
    });

  } catch (error) {
    console.error('Error in ai-assistant function:', error);
    return new Response(JSON.stringify({ 
      error: error.message,
      success: false 
    }), {
      status: 500,
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
    });
  }
});